LAYER = 1

Found 4 quarters
Pre-calculated 10 halves
# shapes: 256
# halves: 10
# shapes whose halves aren't stable: 0
# quarters: 4

LAYER = 2

Found 14 quarters
Pre-calculated 97 halves
# shapes: 35281
# halves: 97
# shapes whose halves aren't stable: 45
# quarters: 14

LAYER = 3

Found 46 quarters
Pre-calculated 905 halves
# shapes: 3865768
# halves: 917
# shapes whose halves aren't stable: 11627
# quarters: 47

LAYER = 4

...
# shapes: 349728289
# halves: 8148
# shapes whose halves aren't stable: 2002457
# quarters: 152

LAYER = 5

Found 435 quarters
Pre-calculated 62670 halves
# shapes: 26929624298
# halves: 67669
# shapes whose halves aren't stable: 251172538
# quarters: 476

Ideas
- Create a program to display the first 10 shapes in the shapes list.  DONE

Notes
- The database always includes the null shape as part of the halves.
- The database stores key halves and key shapes.
- The halves are all possible shapes that have one half empty, which includes quarter shapes.
- So that's 0..2 adjacent quarters.
- All 1-layer shapes can be made by swapping halves.
- There are only 9 1-layer key shapes.  All 255 1-layer shapes can be made from these.
  - Note: need to mirror some shapes, which is not a operation in-game.
- The shapes are possible shapes that can't be made from the halves by swapping.
- For example, shapes that require stacking, like S---:SSS-.
- There are 45 2-layer key shapes that can't be made by swapping halves.

Questions
- Are there half shapes that can't be made by swapping?  Of course, the stacked ones.
- Can all 2-layer shapes be made by either swapping or stacking? (Hybrid stacking)

Ideas
- Implement a shape solver.
- Need various build methods...
  - For example: swapping, stacking, hybrid, etc.
  - All 1-layer shapes can be made by swapping, so the result of the solver only needs to break down to 1-layer shapes.
- The solver needs to output the list of input shapes (1-layer), and the build instructions (how to assemble them).
- Maybe call it a build engine.  Or MAM brain.  Or shape solver.  Or solution finder.
- Also need a method to follow the build instructions to confirm / verify that the solver works.
- Method
  - Input a shape.
  - Determine how to solve it.
  - Output a solution, which contains a list of 1-layer shapes and build instructions.
  - Follow the build instructions
  - Verify the result matches the input
- Run this for all shapes in the database.
- Output a list of the shapes that are not found.
- Figure out a new algorithm how to build them.
- Update the solver with the new algorithm.
- Repeat
- Example, for 2-layer shapes...
  - The solver can ouput one solution that just unstacks the layers.
  - The verifer restacks and compares.

Questions
- Will there be multiple possible solutions?  Yes
- There might be multiple correct, or only some correct.
- Either the verifier needs to be part of the solver to determine which is correct, or ...
- the solver will output multiple possible solutions, and need a verifier for each one.

Notes
- Will need a notation and data structure for build instructions / solutions.

Claw   P---P---:P-------:cRCu--Cu:--------
Snake  P-P-P-P-:------Sy:CgCg--Cg:--Cy----:CwcyCw--
Piggy  P---P-P-:WrCmCmWr:P-----P-:P-cwSw--:WmcrCrWm
Other  CuP-P-P-:--P-CuCu:CuCu--P-:--CuCuP-:cr--P-Cu

??? {P-Cg--P-:crCg--P-:crP-Cucr:crP-Cg--:crCgP-Cu} the Cu's must be swapped in on this shape

Test shape "Books" by RunExcept...
https://discord.com/channels/1000343719314198548/1286691966679126126/1287210914394673162

Drop Book?

Question
- Are there shapes that are possible in 4-layer mode, that are impossible in 5-layer mode?
- I think the claw shapes can be made in both, even if they have fewer layers.
- Are there less than 4 layer shapes only possible in 5-layer mode?

Notes
- Hybrid stacker/swapper
  - If the top layer has no crystals, unstack it.
  - Repeat until layer with a crystal is found.
  - Cut into quarters (unswap), return each quad for each layer.
  - Or, for each layer, return layer with pins for crystals, and use crystal gen.
- This will fail if there are gaps during the swapping.

Ideas
- Make an SPU to verify the solutions.
- Solver output is the SPU input.
- Solution is a list of shapes and instructions.
- List of shapes [S1, S2, S3, ...]
- Instuctions
  - stack
  - cut left/right
  - swap
  - rotate 1,2,3
  - pin push
  - crystal
  - etc.

From SPU...
 * Instructions
 *        F - flush stack
 *        I - input
 *        O - ouput
 *      <n> - move shape at index <n> to top of stack
 *    L,U,R - rotate 90, 180, 270
 *        C - cut
 *        S - stack
 *        X - trash

Ideas
- Use X for crystal, T for trash, P for pin, etc.

Ideas
- Write a TMAM algorithm

TMAM algorithm 0.1
- Multiple factories: layer stacker MAM, gapless CMAM, <gap magic>, etc.
- Analyze / solve
  - If top layer has no crystals, unstack it and send it to the layer stacker.
  - Else if top layer has crystals and (the remaining shape has) no gaps, send it to the gapless CMAM.
  - Else ... <gap magic>
  - repeat until no layers left.
- Verify / check
  - ...
- Construct / build
  - ... <gap magic>
  - gapless CMAM build
  - layer MAM build
- Done

TMAM Shape Solver 0.2
1> Unstack all stackable layers from the top and send to the layer stacking MAM.
2> If the remaining shape is gapless, send it to the quad swapping CMAM.
3> Else if the remaining shape can be made by swapping two stable half shapes - send the half shapes to two half-shape TMAMs.
4> Else <TBD>

- #1 - Maybe also any remaining pins that can be stacked on top?
- Is it better to combine #2 and #3?  A CMAM could create half-shapes, but all of them?

Layer Stacker MAM
- Layers may have solids and gaps and pins.
- Stacks non-crystal layers on top of each other.

Gapless CMAM
- Quarter stacker method.
- Make each quad (multiple layers), and swap them together.
- Layers may have solids and pins(?) and crystals.
- Assume each layer can have multiple crystal colors, so each crystal must be made one quarter at a time.
- Assumes all layers below are also gapless
- Issue: Are pins okay?  Probably not below a crystal.
- Question: The top layer could have gaps - is this useful?

Issues
- Breaking crystal techniques...
  - Creating gaps under crystals ("drops") requires breaking crystal layers.
  - Crating gaps under shelves supported by crystal requires breaking cystal stacks.

Idea
- Store the operation that made the new shape.
- This would at make at least one way to create the shape.
- Not sure if need to store the input shapes, or just the operation would be enough.
- rotate (not needed), stack (I think this only stacks one layer on top), swap (not needed)
- crystal (maybe assume all crystyals where created in the last step?)
- pin push - probably complicated to figure out input shape.

Idea
- Verify that the fat shape list (non-halves) is correct.
- Check each fat shape to see if is made from stable halves.
- Cut a fat shape in half (both ways) and reassemble.  Should make a new shape in both ways.
- Report the ones that fail.

Idea
- Shape solver
- Use the known list to find solutions.
- First, do a second pass on the known list to make sure the thin and fat shapes are correct.
- Re-create the list of all quarter shapes (verify that they are complete by cutting all known shapes)
- Re-create the list of one-layer shapes (for stacking on top).
- Find shapes of increasing operational complexity...  (not sure how)
- For example
  - Using just thin shapes, make all shapes that are swapped (this should be the same as the thin list).
  - Then do crystal, then stacking, then pin pushing, ???
- Issue: Are there shapes that need more than one step?  Probably.
  - Other than crystal and pin push...
- Record found shapes in different lists according to the operation used to make them,
- Or, store a structure for each new shape found with operations, and maybe the input shapes.
- Write a file (new file format) with solutions.

Idea
- Find shapes that can only be made that require parts to fall doing a pin pushed crystal break.

Notes
- Might have found a bug in collapse.
- How does it handle hanging crystals?
- How does it handle shapes supported by a hanging crystal?
- Okay, looks good so far.
- It finds all suported parts first and keeps them.
- Everything else is falling parts.
- Breaks all crystals in the falling parts.
- Finds connected parts on each layer (bottom up) and stacks them from their current positions.
